# Задача 33:
# Задана натуральная степень k. 
# Сформировать случайным образом список коэффициентов (значения от 0 до 100) многочлена 
# и записать в файл многочлен степени k. 
# Пример: k=2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0

# from random import randint

# k = int(input('Введите натуральную степень k: '))
# f = open("HW_5_task_1.txt", "w") # создали файл HW_5_task_1 для записи

# for i in range(k):
#     a = randint(0, 100) # рандомно получаем k раз коэффициенты
#     if a !=0:
#         f.write(f"{a}*x^{k-i} + ") # записываем в файл рандомный коэф и х в степени
#     print (a, end=" ") # печать рандомного списка коэф
# a = randint(0, 100) # рандомно получаем еще один k коэффициент
# if a !=0:
#     f.write(f"{a}") # записываем один k коэффициент
# f.write(f" = 0") # завершаем формулу
# f.close() # закрываем файл

# Задача 35:
# В файле находится N натуральных чисел, записанных через пробел. 
# Среди чисел не хватает одного, чтобы выполнялось условие A[i] - 1 = A[i-1]. Найти его.

# import os
# import sys 

# f = open(os.path.join(sys.path[0],"HW_5_task_2.txt"), "r") # переменная f - открыли файл HW_5_task_2 для чтения
# buf = f.read() # новая переменная buf - записали в нее то, что прочли в файле
# input = buf.split() # новая переменная input - записали в нее список строк, кот преобразовали из строки
# input = list(map(lambda x: int(x), input)) # список строк преобразовываем в int
# print(input)
# for i in range(1,len(input)): # циклом проверяем i в диапазоне от 1 до длины списка
#     if input[i-1] != input[i] - 1: # вводим наше условие
#         print(f"Пропущено {input[i-1]+1}") # выводим на печать пропущенный элемент


# Задача 43:
# Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.
# Пример: [1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]

numbers = [1, 2, 3, 5, 1, 5, 3, 10]

def get_unique_num(numbers):
    unique = []

    for i in numbers:
        count = 0
        for j in numbers:
            if i == j:
                count+=1
        if count == 1:
            unique.append(i)
    return unique

print(get_unique_num(numbers))